"""
Method to infer a table schema from list of records. This can be replaced
if there is a better way to get the table schemas from SLIMS.
"""

import argparse
import re
from pathlib import Path
from typing import List, Optional, Union

from slims.internal import Record

from aind_slims_api.tables.core import SlimsColumnDataType

PK_PATTERN = re.compile(".*._pk$")
CAMEL_CASE_PATTERN = re.compile(r"(?<!^)(?=[A-Z])")


def _map_column(col: dict) -> Optional[str]:
    """
    Maps a column from a slims json_entity object into a SQLModel Field.
    Parameters
    ----------
    col : dict

    Returns
    -------
    str | None
    """
    data_type = col.get("datatype")
    name = col.get("name")
    title = col.get("title")
    match data_type:
        case SlimsColumnDataType.BOOLEAN:
            return f'\t{name}: Optional[bool] = Field(default=None, title="{title}")'
        case SlimsColumnDataType.DATE:
            return (
                f'\t{name}: Optional[datetime] = Field(default=None, title="{title}")'
            )
        case SlimsColumnDataType.ENUM:
            return f'\t{name}: Optional[str] = Field(default=None, title="{title}")'
        case SlimsColumnDataType.FLOAT:
            return f'\t{name}: Optional[float] = Field(default=None, title="{title}")'
        case SlimsColumnDataType.FOREIGN_KEY:
            foreign_table = col.get("foreignTable")
            foreign_key = col.get("foreignDisplayColumn")
            if foreign_table and foreign_key:
                return (
                    f'\t{name}: Optional[int] = Field(default=None, title="{title}", '
                    f'foreign_key="{foreign_table}.{foreign_key}")'
                )
            else:
                return None
        case SlimsColumnDataType.INTEGER:
            if re.match(PK_PATTERN, name):
                return f'\t{name}: int = Field(..., title="{title}", primary_key=True)'
            else:
                return f'\t{name}: Optional[int] = Field(default=None, title="{title}")'
        case SlimsColumnDataType.MULTIPLE_ENUM:
            return (
                f'\t{name}: Optional[List[str]] = Field(default=None, title="{title}")'
            )
        case SlimsColumnDataType.MULTIPLE_FOREIGN_KEY:
            foreign_table = col.get("foreignTable")
            foreign_key = col.get("foreignDisplayColumn")
            if foreign_table and foreign_key:
                return (
                    f"\t{name}: Optional[List[int]] = Field(default=None, "
                    f'title="{title}", foreign_key="{foreign_table}.{foreign_key}")'
                )
            else:
                return None
        case SlimsColumnDataType.NA:
            return None
        case SlimsColumnDataType.QUANTITY:
            return (
                f'\t{name}: Optional[Quantity] = Field(default=None, title="{title}")'
            )
        case SlimsColumnDataType.STRING:
            return f'\t{name}: Optional[str] = Field(default=None, title="{title}")'
        case _:
            return None


def generate_module(
    records: Union[Record, List[Record]], write_path: Optional[Path] = None
) -> None:
    """
    Infers a SQLModel given record(s) pulled from SLIMS for a table.
    Parameters
    ----------
    records : Union[Record, List[Record]]
    write_path : Optional[Path]
      If None, will default to using the table name and current working
      directory.

    Returns
    -------
    None

    Examples
    --------
    >>> from slims.slims import Slims
    >>> import os
    >>>
    >>> client = Slims(
    >>>     name="slims",
    >>>     url=os.getenv("SLIMS_URL"),
    >>>     username=os.getenv("SLIMS_USERNAME"),
    >>>     password=os.getenv("SLIMS_PASSWORD"),
    >>> )
    >>> # For some reason, certain corrupt records will raise an error when
    >>> # fetching a table. Adjust the start and end if needed.
    >>> rd_records = client.fetch(
    >>>   table="ReferenceDataRecord",
    >>>   criteria=None,
    >>>   sort=None,
    >>>   start=0,
    >>>   end=1000
    >>> )
    >>> generate_module(records=rd_records)

    """

    file_lines = list()
    file_lines.append('"""\n')
    file_lines.append("Autogenerated module\n")
    file_lines.append('"""\n')
    file_lines.append("\n")
    file_lines.append("from sqlmodel import SQLModel, Field\n")
    file_lines.append("from typing import Optional, List\n")
    file_lines.append("from datetime import datetime\n")
    file_lines.append("\n")
    file_lines.append("\n")
    table_name = records[0].table_name()
    file_lines.append(f"class {table_name}(SQLModel):\n")
    file_lines.append('\t"""\n')
    file_lines.append(f"\tAutogenerated class for SLIMS table {table_name}\n")
    file_lines.append('\t"""\n')
    file_lines.append("\n")
    file_lines.append(f"\t__tablename__ = {table_name}\n")
    file_lines.append("\n")
    list_of_records = records if isinstance(records, list) else [records]
    mapped_column_strings = set()
    add_quantity = False
    for record in list_of_records:
        columns = record.json_entity["columns"]
        for c in columns:
            mapped_col = _map_column(c)
            if c.get("datatype") == SlimsColumnDataType.QUANTITY:
                add_quantity = True
            if mapped_col:
                mapped_column_strings.add(mapped_col)

    # from aind_slims_api.tables.core import Quantity
    if add_quantity:
        file_lines.insert(6, "from aind_slims_api.tables.core import Quantity\n")
    mapped_column_strings = sorted(list(set(mapped_column_strings)))

    for m in mapped_column_strings:
        file_lines.append(f"{m}\n")
    if write_path is None:
        table_name_snake_case = CAMEL_CASE_PATTERN.sub("_", table_name).lower()
        write_path = Path(f"{table_name_snake_case}.py")
    with open(write_path, "w") as f:
        f.writelines(file_lines)


if __name__ == "__main__":
    import os

    from slims.slims import Slims

    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--table", help="Table name in SLIMS", type=str)
    parser.add_argument(
        "-s",
        "--start",
        nargs="?",
        const=None,
        type=int,
        help="Optional integer for start index",
    )
    parser.add_argument(
        "-e",
        "--end",
        nargs="?",
        const=None,
        type=int,
        help="Optional integer for end index",
    )
    parser.add_argument(
        "-f",
        "--file-path",
        nargs="?",
        const=None,
        type=str,
        help="Optional file path to write to",
    )
    args = parser.parse_args()
    client = Slims(
        name="slims",
        url=os.getenv("SLIMS_URL"),
        username=os.getenv("SLIMS_USERNAME"),
        password=os.getenv("SLIMS_PASSWORD"),
    )
    records = client.fetch(
        table=args.table, criteria=None, start=args.start, end=args.end
    )
    generate_module(records=records, write_path=args.file_path)
